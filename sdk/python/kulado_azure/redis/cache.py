# coding=utf-8
# *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import kulado
import kulado.runtime
from .. import utilities, tables

class Cache(kulado.CustomResource):
    capacity: kulado.Output[float]
    """
    The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`.
    """
    enable_non_ssl_port: kulado.Output[bool]
    """
    Enable the non-SSL port (6789) - disabled by default.
    """
    family: kulado.Output[str]
    """
    The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
    """
    hostname: kulado.Output[str]
    """
    The Hostname of the Redis Instance
    """
    location: kulado.Output[str]
    """
    The location of the resource group.
    """
    minimum_tls_version: kulado.Output[str]
    """
    The minimum TLS version.  Defaults to `1.0`.
    """
    name: kulado.Output[str]
    """
    The name of the Redis instance. Changing this forces a
    new resource to be created.
    """
    patch_schedules: kulado.Output[list]
    """
    A list of `patch_schedule` blocks as defined below - only available for Premium SKU's.
    """
    port: kulado.Output[float]
    """
    The non-SSL Port of the Redis Instance
    """
    primary_access_key: kulado.Output[str]
    """
    The Primary Access Key for the Redis Instance
    """
    private_static_ip_address: kulado.Output[str]
    """
    The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. Changing this forces a new resource to be created.
    """
    redis_configuration: kulado.Output[dict]
    """
    A `redis_configuration` as defined below - with some limitations by SKU - defaults/details are shown below.
    """
    resource_group_name: kulado.Output[str]
    """
    The name of the resource group in which to
    create the Redis instance.
    """
    secondary_access_key: kulado.Output[str]
    """
    The Secondary Access Key for the Redis Instance
    """
    shard_count: kulado.Output[float]
    """
    *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
    """
    sku_name: kulado.Output[str]
    """
    The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
    """
    ssl_port: kulado.Output[float]
    """
    The SSL Port of the Redis Instance
    """
    subnet_id: kulado.Output[str]
    """
    The ID of the Subnet within which the Redis Cache should be deployed. Changing this forces a new resource to be created.
    """
    tags: kulado.Output[dict]
    """
    A mapping of tags to assign to the resource.
    """
    zones: kulado.Output[str]
    """
    A list of a single item of the Availability Zone which the Redis Cache should be allocated in.
    """
    def __init__(__self__, resource_name, opts=None, capacity=None, enable_non_ssl_port=None, family=None, location=None, minimum_tls_version=None, name=None, patch_schedules=None, private_static_ip_address=None, redis_configuration=None, resource_group_name=None, shard_count=None, sku_name=None, subnet_id=None, tags=None, zones=None, __name__=None, __opts__=None):
        """
        Manages a Redis Cache.
        
        ## Default Redis Configuration Values
        
        | Redis Value                     | Basic        | Standard     | Premium      |
        | ------------------------------- | ------------ | ------------ | ------------ |
        | enable_authentication           | true         | true         | true         |
        | maxmemory_reserved              | 2            | 50           | 200          |
        | maxfragmentationmemory_reserved | 2            | 50           | 200          |
        | maxmemory_delta                 | 2            | 50           | 200          |
        | maxmemory_policy                | volatile-lru | volatile-lru | volatile-lru |
        
        > **NOTE:** The `maxmemory_reserved`, `maxmemory_delta` and `maxfragmentationmemory-reserved` settings are only available for Standard and Premium caches. More details are available in the Relevant Links section below._
        
        ---
        
        A `patch_schedule` block supports the following:
        
        * `day_of_week` (Required) the Weekday name - possible values include `Monday`, `Tuesday`, `Wednesday` etc.
        
        * `start_hour_utc` - (Optional) the Start Hour for maintenance in UTC - possible values range from `0 - 23`.
        
        > **Note:** The Patch Window lasts for `5` hours from the `start_hour_utc`.
        
        ## Relevant Links
        
         - [Azure Redis Cache: SKU specific configuration limitations](https://azure.microsoft.com/en-us/documentation/articles/cache-configure/#advanced-settings)
         - [Redis: Available Configuration Settings](http://redis.io/topics/config)
        
        :param str resource_name: The name of the resource.
        :param kulado.ResourceOptions opts: Options for the resource.
        :param kulado.Input[float] capacity: The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`.
        :param kulado.Input[bool] enable_non_ssl_port: Enable the non-SSL port (6789) - disabled by default.
        :param kulado.Input[str] family: The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
        :param kulado.Input[str] location: The location of the resource group.
        :param kulado.Input[str] minimum_tls_version: The minimum TLS version.  Defaults to `1.0`.
        :param kulado.Input[str] name: The name of the Redis instance. Changing this forces a
               new resource to be created.
        :param kulado.Input[list] patch_schedules: A list of `patch_schedule` blocks as defined below - only available for Premium SKU's.
        :param kulado.Input[str] private_static_ip_address: The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. Changing this forces a new resource to be created.
        :param kulado.Input[dict] redis_configuration: A `redis_configuration` as defined below - with some limitations by SKU - defaults/details are shown below.
        :param kulado.Input[str] resource_group_name: The name of the resource group in which to
               create the Redis instance.
        :param kulado.Input[float] shard_count: *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
        :param kulado.Input[str] sku_name: The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
        :param kulado.Input[str] subnet_id: The ID of the Subnet within which the Redis Cache should be deployed. Changing this forces a new resource to be created.
        :param kulado.Input[dict] tags: A mapping of tags to assign to the resource.
        :param kulado.Input[str] zones: A list of a single item of the Availability Zone which the Redis Cache should be allocated in.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/redis_cache.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, kulado.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if capacity is None:
            raise TypeError("Missing required property 'capacity'")
        __props__['capacity'] = capacity

        __props__['enable_non_ssl_port'] = enable_non_ssl_port

        if family is None:
            raise TypeError("Missing required property 'family'")
        __props__['family'] = family

        __props__['location'] = location

        __props__['minimum_tls_version'] = minimum_tls_version

        __props__['name'] = name

        __props__['patch_schedules'] = patch_schedules

        __props__['private_static_ip_address'] = private_static_ip_address

        __props__['redis_configuration'] = redis_configuration

        if resource_group_name is None:
            raise TypeError("Missing required property 'resource_group_name'")
        __props__['resource_group_name'] = resource_group_name

        __props__['shard_count'] = shard_count

        if sku_name is None:
            raise TypeError("Missing required property 'sku_name'")
        __props__['sku_name'] = sku_name

        __props__['subnet_id'] = subnet_id

        __props__['tags'] = tags

        __props__['zones'] = zones

        __props__['hostname'] = None
        __props__['port'] = None
        __props__['primary_access_key'] = None
        __props__['secondary_access_key'] = None
        __props__['ssl_port'] = None

        super(Cache, __self__).__init__(
            'azure:redis/cache:Cache',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

