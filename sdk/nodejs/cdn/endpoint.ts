// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kulado from "@kulado/kulado";
import * as utilities from "../utilities";

/**
 * A CDN Endpoint is the entity within a CDN Profile containing configuration information regarding caching behaviors and origins. The CDN Endpoint is exposed using the URL format <endpointname>.azureedge.net.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as kulado from "@kulado/kulado";
 * import * as azure from "@kulado/azure";
 * import * as random from "@kulado/random";
 * 
 * const testResourceGroup = new azure.core.ResourceGroup("test", {
 *     location: "West US",
 *     name: "acceptanceTestResourceGroup1",
 * });
 * const server = new random.RandomId("server", {
 *     byteLength: 8,
 *     keepers: {
 *         azi_id: 1,
 *     },
 * });
 * const testProfile = new azure.cdn.Profile("test", {
 *     location: testResourceGroup.location,
 *     name: "exampleCdnProfile",
 *     resourceGroupName: testResourceGroup.name,
 *     sku: "Standard_Verizon",
 * });
 * const testEndpoint = new azure.cdn.Endpoint("test", {
 *     location: testResourceGroup.location,
 *     name: server.hex,
 *     origins: [{
 *         hostName: "www.example.com",
 *         name: "exampleCdnOrigin",
 *     }],
 *     profileName: testProfile.name,
 *     resourceGroupName: testResourceGroup.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/cdn_endpoint.html.markdown.
 */
export class Endpoint extends kulado.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: kulado.Input<kulado.ID>, state?: EndpointState, opts?: kulado.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __kuladoType = 'azure:cdn/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Kulado SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__kuladoType'] === Endpoint.__kuladoType;
    }

    /**
     * An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
     */
    public readonly contentTypesToCompresses!: kulado.Output<string[]>;
    /**
     * A set of Geo Filters for this CDN Endpoint. Each `geo_filter` block supports fields documented below.
     */
    public readonly geoFilters!: kulado.Output<{ action: string, countryCodes: string[], relativePath: string }[] | undefined>;
    public /*out*/ readonly hostName!: kulado.Output<string>;
    /**
     * Indicates whether compression is to be enabled. Defaults to false.
     */
    public readonly isCompressionEnabled!: kulado.Output<boolean | undefined>;
    /**
     * Defaults to `true`.
     */
    public readonly isHttpAllowed!: kulado.Output<boolean | undefined>;
    /**
     * Defaults to `true`.
     */
    public readonly isHttpsAllowed!: kulado.Output<boolean | undefined>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    public readonly location!: kulado.Output<string>;
    /**
     * Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
     */
    public readonly name!: kulado.Output<string>;
    /**
     * What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
     */
    public readonly optimizationType!: kulado.Output<string | undefined>;
    /**
     * The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below.
     */
    public readonly origins!: kulado.Output<{ hostName: string, httpPort?: number, httpsPort?: number, name: string }[]>;
    /**
     * The host header CDN provider will send along with content requests to origins. Defaults to the host name of the origin.
     */
    public readonly originHostHeader!: kulado.Output<string>;
    /**
     * The path used at for origin requests.
     */
    public readonly originPath!: kulado.Output<string>;
    /**
     * the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `origin_path`.
     */
    public readonly probePath!: kulado.Output<string>;
    /**
     * The CDN Profile to which to attach the CDN Endpoint.
     */
    public readonly profileName!: kulado.Output<string>;
    /**
     * Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. Defaults to `IgnoreQueryString`.
     */
    public readonly querystringCachingBehaviour!: kulado.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the CDN Endpoint.
     */
    public readonly resourceGroupName!: kulado.Output<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags!: kulado.Output<{[key: string]: any}>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: kulado.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: kulado.CustomResourceOptions) {
        let inputs: kulado.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as EndpointState | undefined;
            inputs["contentTypesToCompresses"] = state ? state.contentTypesToCompresses : undefined;
            inputs["geoFilters"] = state ? state.geoFilters : undefined;
            inputs["hostName"] = state ? state.hostName : undefined;
            inputs["isCompressionEnabled"] = state ? state.isCompressionEnabled : undefined;
            inputs["isHttpAllowed"] = state ? state.isHttpAllowed : undefined;
            inputs["isHttpsAllowed"] = state ? state.isHttpsAllowed : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["optimizationType"] = state ? state.optimizationType : undefined;
            inputs["origins"] = state ? state.origins : undefined;
            inputs["originHostHeader"] = state ? state.originHostHeader : undefined;
            inputs["originPath"] = state ? state.originPath : undefined;
            inputs["probePath"] = state ? state.probePath : undefined;
            inputs["profileName"] = state ? state.profileName : undefined;
            inputs["querystringCachingBehaviour"] = state ? state.querystringCachingBehaviour : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if (!args || args.origins === undefined) {
                throw new Error("Missing required property 'origins'");
            }
            if (!args || args.profileName === undefined) {
                throw new Error("Missing required property 'profileName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["contentTypesToCompresses"] = args ? args.contentTypesToCompresses : undefined;
            inputs["geoFilters"] = args ? args.geoFilters : undefined;
            inputs["isCompressionEnabled"] = args ? args.isCompressionEnabled : undefined;
            inputs["isHttpAllowed"] = args ? args.isHttpAllowed : undefined;
            inputs["isHttpsAllowed"] = args ? args.isHttpsAllowed : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["optimizationType"] = args ? args.optimizationType : undefined;
            inputs["origins"] = args ? args.origins : undefined;
            inputs["originHostHeader"] = args ? args.originHostHeader : undefined;
            inputs["originPath"] = args ? args.originPath : undefined;
            inputs["probePath"] = args ? args.probePath : undefined;
            inputs["profileName"] = args ? args.profileName : undefined;
            inputs["querystringCachingBehaviour"] = args ? args.querystringCachingBehaviour : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["hostName"] = undefined /*out*/;
        }
        super(Endpoint.__kuladoType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    /**
     * An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
     */
    readonly contentTypesToCompresses?: kulado.Input<kulado.Input<string>[]>;
    /**
     * A set of Geo Filters for this CDN Endpoint. Each `geo_filter` block supports fields documented below.
     */
    readonly geoFilters?: kulado.Input<kulado.Input<{ action: kulado.Input<string>, countryCodes: kulado.Input<kulado.Input<string>[]>, relativePath: kulado.Input<string> }>[]>;
    readonly hostName?: kulado.Input<string>;
    /**
     * Indicates whether compression is to be enabled. Defaults to false.
     */
    readonly isCompressionEnabled?: kulado.Input<boolean>;
    /**
     * Defaults to `true`.
     */
    readonly isHttpAllowed?: kulado.Input<boolean>;
    /**
     * Defaults to `true`.
     */
    readonly isHttpsAllowed?: kulado.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    readonly location?: kulado.Input<string>;
    /**
     * Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
     */
    readonly optimizationType?: kulado.Input<string>;
    /**
     * The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below.
     */
    readonly origins?: kulado.Input<kulado.Input<{ hostName: kulado.Input<string>, httpPort?: kulado.Input<number>, httpsPort?: kulado.Input<number>, name: kulado.Input<string> }>[]>;
    /**
     * The host header CDN provider will send along with content requests to origins. Defaults to the host name of the origin.
     */
    readonly originHostHeader?: kulado.Input<string>;
    /**
     * The path used at for origin requests.
     */
    readonly originPath?: kulado.Input<string>;
    /**
     * the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `origin_path`.
     */
    readonly probePath?: kulado.Input<string>;
    /**
     * The CDN Profile to which to attach the CDN Endpoint.
     */
    readonly profileName?: kulado.Input<string>;
    /**
     * Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. Defaults to `IgnoreQueryString`.
     */
    readonly querystringCachingBehaviour?: kulado.Input<string>;
    /**
     * The name of the resource group in which to create the CDN Endpoint.
     */
    readonly resourceGroupName?: kulado.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: kulado.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * An array of strings that indicates a content types on which compression will be applied. The value for the elements should be MIME types.
     */
    readonly contentTypesToCompresses?: kulado.Input<kulado.Input<string>[]>;
    /**
     * A set of Geo Filters for this CDN Endpoint. Each `geo_filter` block supports fields documented below.
     */
    readonly geoFilters?: kulado.Input<kulado.Input<{ action: kulado.Input<string>, countryCodes: kulado.Input<kulado.Input<string>[]>, relativePath: kulado.Input<string> }>[]>;
    /**
     * Indicates whether compression is to be enabled. Defaults to false.
     */
    readonly isCompressionEnabled?: kulado.Input<boolean>;
    /**
     * Defaults to `true`.
     */
    readonly isHttpAllowed?: kulado.Input<boolean>;
    /**
     * Defaults to `true`.
     */
    readonly isHttpsAllowed?: kulado.Input<boolean>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    readonly location?: kulado.Input<string>;
    /**
     * Specifies the name of the CDN Endpoint. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * What types of optimization should this CDN Endpoint optimize for? Possible values include `DynamicSiteAcceleration`, `GeneralMediaStreaming`, `GeneralWebDelivery`, `LargeFileDownload` and `VideoOnDemandMediaStreaming`.
     */
    readonly optimizationType?: kulado.Input<string>;
    /**
     * The set of origins of the CDN endpoint. When multiple origins exist, the first origin will be used as primary and rest will be used as failover options. Each `origin` block supports fields documented below.
     */
    readonly origins: kulado.Input<kulado.Input<{ hostName: kulado.Input<string>, httpPort?: kulado.Input<number>, httpsPort?: kulado.Input<number>, name: kulado.Input<string> }>[]>;
    /**
     * The host header CDN provider will send along with content requests to origins. Defaults to the host name of the origin.
     */
    readonly originHostHeader?: kulado.Input<string>;
    /**
     * The path used at for origin requests.
     */
    readonly originPath?: kulado.Input<string>;
    /**
     * the path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the `origin_path`.
     */
    readonly probePath?: kulado.Input<string>;
    /**
     * The CDN Profile to which to attach the CDN Endpoint.
     */
    readonly profileName: kulado.Input<string>;
    /**
     * Sets query string caching behavior. Allowed values are `IgnoreQueryString`, `BypassCaching` and `UseQueryString`. Defaults to `IgnoreQueryString`.
     */
    readonly querystringCachingBehaviour?: kulado.Input<string>;
    /**
     * The name of the resource group in which to create the CDN Endpoint.
     */
    readonly resourceGroupName: kulado.Input<string>;
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: kulado.Input<{[key: string]: any}>;
}
