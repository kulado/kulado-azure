// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kulado from "@kulado/kulado";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing Network Watcher.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as kulado from "@kulado/kulado";
 * import * as azure from "@kulado/azure";
 * 
 * const test = kulado.all([azurerm_network_watcher_test.name, azurerm_resource_group_test.name]).apply(([azurerm_network_watcher_testName, azurerm_resource_group_testName]) => azure.network.getNetworkWatcher({
 *     name: azurerm_network_watcher_testName,
 *     resourceGroupName: azurerm_resource_group_testName,
 * }));
 * 
 * export const networkWatcherId = test.id;
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/network_watcher.html.markdown.
 */
export function getNetworkWatcher(args: GetNetworkWatcherArgs, opts?: kulado.InvokeOptions): Promise<GetNetworkWatcherResult> & GetNetworkWatcherResult {
    const promise: Promise<GetNetworkWatcherResult> = kulado.runtime.invoke("azure:network/getNetworkWatcher:getNetworkWatcher", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);

    return kulado.utils.liftProperties(promise, opts);
}

/**
 * A collection of arguments for invoking getNetworkWatcher.
 */
export interface GetNetworkWatcherArgs {
    /**
     * Specifies the Name of the Network Watcher.
     */
    readonly name: string;
    /**
     * Specifies the Name of the Resource Group within which the Network Watcher exists.
     */
    readonly resourceGroupName: string;
}

/**
 * A collection of values returned by getNetworkWatcher.
 */
export interface GetNetworkWatcherResult {
    /**
     * The supported Azure location where the resource exists.
     */
    readonly location: string;
    readonly name: string;
    readonly resourceGroupName: string;
    /**
     * A mapping of tags assigned to the resource.
     */
    readonly tags: {[key: string]: any};
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
