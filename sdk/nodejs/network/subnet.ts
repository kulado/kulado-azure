// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kulado from "@kulado/kulado";
import * as utilities from "../utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/subnet.html.markdown.
 */
export class Subnet extends kulado.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: kulado.Input<kulado.ID>, state?: SubnetState, opts?: kulado.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __kuladoType = 'azure:network/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Kulado SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__kuladoType'] === Subnet.__kuladoType;
    }

    /**
     * The address prefix to use for the subnet.
     */
    public readonly addressPrefix!: kulado.Output<string>;
    /**
     * One or more `delegation` blocks as defined below.
     */
    public readonly delegations!: kulado.Output<{ name: string, serviceDelegation: { actions?: string[], name: string } }[] | undefined>;
    /**
     * The collection of IP Configurations with IPs within this subnet.
     */
    public readonly ipConfigurations!: kulado.Output<string[]>;
    /**
     * The name of the subnet. Changing this forces a new resource to be created.
     */
    public readonly name!: kulado.Output<string>;
    /**
     * The ID of the Network Security Group to associate with the subnet.
     */
    public readonly networkSecurityGroupId!: kulado.Output<string | undefined>;
    /**
     * The name of the resource group in which to create the subnet. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: kulado.Output<string>;
    /**
     * The ID of the Route Table to associate with the subnet.
     */
    public readonly routeTableId!: kulado.Output<string | undefined>;
    /**
     * The list of Service endpoints to associate with the subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`, `Microsoft.Sql` and `Microsoft.Storage`.
     */
    public readonly serviceEndpoints!: kulado.Output<string[] | undefined>;
    /**
     * The name of the virtual network to which to attach the subnet. Changing this forces a new resource to be created.
     */
    public readonly virtualNetworkName!: kulado.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: kulado.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: kulado.CustomResourceOptions) {
        let inputs: kulado.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SubnetState | undefined;
            inputs["addressPrefix"] = state ? state.addressPrefix : undefined;
            inputs["delegations"] = state ? state.delegations : undefined;
            inputs["ipConfigurations"] = state ? state.ipConfigurations : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkSecurityGroupId"] = state ? state.networkSecurityGroupId : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["routeTableId"] = state ? state.routeTableId : undefined;
            inputs["serviceEndpoints"] = state ? state.serviceEndpoints : undefined;
            inputs["virtualNetworkName"] = state ? state.virtualNetworkName : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if (!args || args.addressPrefix === undefined) {
                throw new Error("Missing required property 'addressPrefix'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.virtualNetworkName === undefined) {
                throw new Error("Missing required property 'virtualNetworkName'");
            }
            inputs["addressPrefix"] = args ? args.addressPrefix : undefined;
            inputs["delegations"] = args ? args.delegations : undefined;
            inputs["ipConfigurations"] = args ? args.ipConfigurations : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkSecurityGroupId"] = args ? args.networkSecurityGroupId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["routeTableId"] = args ? args.routeTableId : undefined;
            inputs["serviceEndpoints"] = args ? args.serviceEndpoints : undefined;
            inputs["virtualNetworkName"] = args ? args.virtualNetworkName : undefined;
        }
        super(Subnet.__kuladoType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * The address prefix to use for the subnet.
     */
    readonly addressPrefix?: kulado.Input<string>;
    /**
     * One or more `delegation` blocks as defined below.
     */
    readonly delegations?: kulado.Input<kulado.Input<{ name: kulado.Input<string>, serviceDelegation: kulado.Input<{ actions?: kulado.Input<kulado.Input<string>[]>, name: kulado.Input<string> }> }>[]>;
    /**
     * The collection of IP Configurations with IPs within this subnet.
     */
    readonly ipConfigurations?: kulado.Input<kulado.Input<string>[]>;
    /**
     * The name of the subnet. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * The ID of the Network Security Group to associate with the subnet.
     */
    readonly networkSecurityGroupId?: kulado.Input<string>;
    /**
     * The name of the resource group in which to create the subnet. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: kulado.Input<string>;
    /**
     * The ID of the Route Table to associate with the subnet.
     */
    readonly routeTableId?: kulado.Input<string>;
    /**
     * The list of Service endpoints to associate with the subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`, `Microsoft.Sql` and `Microsoft.Storage`.
     */
    readonly serviceEndpoints?: kulado.Input<kulado.Input<string>[]>;
    /**
     * The name of the virtual network to which to attach the subnet. Changing this forces a new resource to be created.
     */
    readonly virtualNetworkName?: kulado.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * The address prefix to use for the subnet.
     */
    readonly addressPrefix: kulado.Input<string>;
    /**
     * One or more `delegation` blocks as defined below.
     */
    readonly delegations?: kulado.Input<kulado.Input<{ name: kulado.Input<string>, serviceDelegation: kulado.Input<{ actions?: kulado.Input<kulado.Input<string>[]>, name: kulado.Input<string> }> }>[]>;
    /**
     * The collection of IP Configurations with IPs within this subnet.
     */
    readonly ipConfigurations?: kulado.Input<kulado.Input<string>[]>;
    /**
     * The name of the subnet. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * The ID of the Network Security Group to associate with the subnet.
     */
    readonly networkSecurityGroupId?: kulado.Input<string>;
    /**
     * The name of the resource group in which to create the subnet. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: kulado.Input<string>;
    /**
     * The ID of the Route Table to associate with the subnet.
     */
    readonly routeTableId?: kulado.Input<string>;
    /**
     * The list of Service endpoints to associate with the subnet. Possible values include: `Microsoft.AzureActiveDirectory`, `Microsoft.AzureCosmosDB`, `Microsoft.EventHub`, `Microsoft.KeyVault`, `Microsoft.ServiceBus`, `Microsoft.Sql` and `Microsoft.Storage`.
     */
    readonly serviceEndpoints?: kulado.Input<kulado.Input<string>[]>;
    /**
     * The name of the virtual network to which to attach the subnet. Changing this forces a new resource to be created.
     */
    readonly virtualNetworkName: kulado.Input<string>;
}
