// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kulado from "@kulado/kulado";
import * as utilities from "../utilities";

/**
 * Manages a Event Hubs as a nested resource within a Event Hubs namespace.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as kulado from "@kulado/kulado";
 * import * as azure from "@kulado/azure";
 * 
 * const testResourceGroup = new azure.core.ResourceGroup("test", {
 *     location: "West US",
 *     name: "resourceGroup1",
 * });
 * const testEventHubNamespace = new azure.eventhub.EventHubNamespace("test", {
 *     capacity: 1,
 *     kafkaEnabled: false,
 *     location: testResourceGroup.location,
 *     name: "acceptanceTestEventHubNamespace",
 *     resourceGroupName: testResourceGroup.name,
 *     sku: "Standard",
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * const testEventHub = new azure.eventhub.EventHub("test", {
 *     messageRetention: 1,
 *     name: "acceptanceTestEventHub",
 *     namespaceName: testEventHubNamespace.name,
 *     partitionCount: 2,
 *     resourceGroupName: testResourceGroup.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/eventhub.html.markdown.
 */
export class EventHub extends kulado.CustomResource {
    /**
     * Get an existing EventHub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: kulado.Input<kulado.ID>, state?: EventHubState, opts?: kulado.CustomResourceOptions): EventHub {
        return new EventHub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __kuladoType = 'azure:eventhub/eventHub:EventHub';

    /**
     * Returns true if the given object is an instance of EventHub.  This is designed to work even
     * when multiple copies of the Kulado SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventHub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__kuladoType'] === EventHub.__kuladoType;
    }

    /**
     * A `capture_description` block as defined below.
     */
    public readonly captureDescription!: kulado.Output<{ destination: { archiveNameFormat: string, blobContainerName: string, name: string, storageAccountId: string }, enabled: boolean, encoding: string, intervalInSeconds?: number, sizeLimitInBytes?: number, skipEmptyArchives?: boolean } | undefined>;
    public readonly location!: kulado.Output<string>;
    /**
     * Specifies the number of days to retain the events for this Event Hub. Needs to be between 1 and 7 days; or 1 day when using a Basic SKU for the parent EventHub Namespace.
     */
    public readonly messageRetention!: kulado.Output<number>;
    /**
     * Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
     */
    public readonly name!: kulado.Output<string>;
    /**
     * Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    public readonly namespaceName!: kulado.Output<string>;
    /**
     * Specifies the current number of shards on the Event Hub. Changing this forces a new resource to be created.
     */
    public readonly partitionCount!: kulado.Output<number>;
    /**
     * The identifiers for partitions created for Event Hubs.
     */
    public /*out*/ readonly partitionIds!: kulado.Output<string[]>;
    /**
     * The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: kulado.Output<string>;

    /**
     * Create a EventHub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventHubArgs, opts?: kulado.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventHubArgs | EventHubState, opts?: kulado.CustomResourceOptions) {
        let inputs: kulado.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as EventHubState | undefined;
            inputs["captureDescription"] = state ? state.captureDescription : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["messageRetention"] = state ? state.messageRetention : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceName"] = state ? state.namespaceName : undefined;
            inputs["partitionCount"] = state ? state.partitionCount : undefined;
            inputs["partitionIds"] = state ? state.partitionIds : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        } else {
            const args = argsOrState as EventHubArgs | undefined;
            if (!args || args.messageRetention === undefined) {
                throw new Error("Missing required property 'messageRetention'");
            }
            if (!args || args.namespaceName === undefined) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if (!args || args.partitionCount === undefined) {
                throw new Error("Missing required property 'partitionCount'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["captureDescription"] = args ? args.captureDescription : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["messageRetention"] = args ? args.messageRetention : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceName"] = args ? args.namespaceName : undefined;
            inputs["partitionCount"] = args ? args.partitionCount : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["partitionIds"] = undefined /*out*/;
        }
        super(EventHub.__kuladoType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventHub resources.
 */
export interface EventHubState {
    /**
     * A `capture_description` block as defined below.
     */
    readonly captureDescription?: kulado.Input<{ destination: kulado.Input<{ archiveNameFormat: kulado.Input<string>, blobContainerName: kulado.Input<string>, name: kulado.Input<string>, storageAccountId: kulado.Input<string> }>, enabled: kulado.Input<boolean>, encoding: kulado.Input<string>, intervalInSeconds?: kulado.Input<number>, sizeLimitInBytes?: kulado.Input<number>, skipEmptyArchives?: kulado.Input<boolean> }>;
    readonly location?: kulado.Input<string>;
    /**
     * Specifies the number of days to retain the events for this Event Hub. Needs to be between 1 and 7 days; or 1 day when using a Basic SKU for the parent EventHub Namespace.
     */
    readonly messageRetention?: kulado.Input<number>;
    /**
     * Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    readonly namespaceName?: kulado.Input<string>;
    /**
     * Specifies the current number of shards on the Event Hub. Changing this forces a new resource to be created.
     */
    readonly partitionCount?: kulado.Input<number>;
    /**
     * The identifiers for partitions created for Event Hubs.
     */
    readonly partitionIds?: kulado.Input<kulado.Input<string>[]>;
    /**
     * The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: kulado.Input<string>;
}

/**
 * The set of arguments for constructing a EventHub resource.
 */
export interface EventHubArgs {
    /**
     * A `capture_description` block as defined below.
     */
    readonly captureDescription?: kulado.Input<{ destination: kulado.Input<{ archiveNameFormat: kulado.Input<string>, blobContainerName: kulado.Input<string>, name: kulado.Input<string>, storageAccountId: kulado.Input<string> }>, enabled: kulado.Input<boolean>, encoding: kulado.Input<string>, intervalInSeconds?: kulado.Input<number>, sizeLimitInBytes?: kulado.Input<number>, skipEmptyArchives?: kulado.Input<boolean> }>;
    readonly location?: kulado.Input<string>;
    /**
     * Specifies the number of days to retain the events for this Event Hub. Needs to be between 1 and 7 days; or 1 day when using a Basic SKU for the parent EventHub Namespace.
     */
    readonly messageRetention: kulado.Input<number>;
    /**
     * Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
     */
    readonly namespaceName: kulado.Input<string>;
    /**
     * Specifies the current number of shards on the Event Hub. Changing this forces a new resource to be created.
     */
    readonly partitionCount: kulado.Input<number>;
    /**
     * The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: kulado.Input<string>;
}
