// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kulado from "@kulado/kulado";
import * as utilities from "../utilities";

/**
 * Manages a Event Hubs authorization Rule within an Event Hub.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as kulado from "@kulado/kulado";
 * import * as azure from "@kulado/azure";
 * 
 * const testResourceGroup = new azure.core.ResourceGroup("test", {
 *     location: "West US",
 *     name: "resourceGroup1",
 * });
 * const testEventHubNamespace = new azure.eventhub.EventHubNamespace("test", {
 *     capacity: 2,
 *     location: "West US",
 *     name: "acceptanceTestEventHubNamespace",
 *     resourceGroupName: testResourceGroup.name,
 *     sku: "Basic",
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * const testEventHub = new azure.eventhub.EventHub("test", {
 *     messageRetention: 2,
 *     name: "acceptanceTestEventHub",
 *     namespaceName: testEventHubNamespace.name,
 *     partitionCount: 2,
 *     resourceGroupName: testResourceGroup.name,
 * });
 * const testEventHubAuthorizationRule = new azure.eventhub.EventHubAuthorizationRule("test", {
 *     eventhubName: testEventHub.name,
 *     listen: true,
 *     manage: false,
 *     name: "navi",
 *     namespaceName: testEventHubNamespace.name,
 *     resourceGroupName: testResourceGroup.name,
 *     send: false,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/eventhub_authorization_rule.html.markdown.
 */
export class EventHubAuthorizationRule extends kulado.CustomResource {
    /**
     * Get an existing EventHubAuthorizationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: kulado.Input<kulado.ID>, state?: EventHubAuthorizationRuleState, opts?: kulado.CustomResourceOptions): EventHubAuthorizationRule {
        return new EventHubAuthorizationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __kuladoType = 'azure:eventhub/eventHubAuthorizationRule:EventHubAuthorizationRule';

    /**
     * Returns true if the given object is an instance of EventHubAuthorizationRule.  This is designed to work even
     * when multiple copies of the Kulado SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventHubAuthorizationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__kuladoType'] === EventHubAuthorizationRule.__kuladoType;
    }

    /**
     * Specifies the name of the EventHub. Changing this forces a new resource to be created.
     */
    public readonly eventhubName!: kulado.Output<string>;
    /**
     * Does this Authorization Rule have permissions to Listen to the Event Hub? Defaults to `false`.
     */
    public readonly listen!: kulado.Output<boolean | undefined>;
    public readonly location!: kulado.Output<string>;
    /**
     * Does this Authorization Rule have permissions to Manage to the Event Hub? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
     */
    public readonly manage!: kulado.Output<boolean | undefined>;
    /**
     * Specifies the name of the EventHub Authorization Rule resource. Changing this forces a new resource to be created.
     */
    public readonly name!: kulado.Output<string>;
    /**
     * Specifies the name of the grandparent EventHub Namespace. Changing this forces a new resource to be created.
     */
    public readonly namespaceName!: kulado.Output<string>;
    /**
     * The Primary Connection String for the Event Hubs authorization Rule.
     */
    public /*out*/ readonly primaryConnectionString!: kulado.Output<string>;
    /**
     * The Primary Key for the Event Hubs authorization Rule.
     */
    public /*out*/ readonly primaryKey!: kulado.Output<string>;
    /**
     * The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: kulado.Output<string>;
    /**
     * The Secondary Connection String for the Event Hubs authorization Rule.
     */
    public /*out*/ readonly secondaryConnectionString!: kulado.Output<string>;
    /**
     * The Secondary Key for the Event Hubs authorization Rule.
     */
    public /*out*/ readonly secondaryKey!: kulado.Output<string>;
    /**
     * Does this Authorization Rule have permissions to Send to the Event Hub? Defaults to `false`.
     */
    public readonly send!: kulado.Output<boolean | undefined>;

    /**
     * Create a EventHubAuthorizationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventHubAuthorizationRuleArgs, opts?: kulado.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventHubAuthorizationRuleArgs | EventHubAuthorizationRuleState, opts?: kulado.CustomResourceOptions) {
        let inputs: kulado.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as EventHubAuthorizationRuleState | undefined;
            inputs["eventhubName"] = state ? state.eventhubName : undefined;
            inputs["listen"] = state ? state.listen : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["manage"] = state ? state.manage : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceName"] = state ? state.namespaceName : undefined;
            inputs["primaryConnectionString"] = state ? state.primaryConnectionString : undefined;
            inputs["primaryKey"] = state ? state.primaryKey : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["secondaryConnectionString"] = state ? state.secondaryConnectionString : undefined;
            inputs["secondaryKey"] = state ? state.secondaryKey : undefined;
            inputs["send"] = state ? state.send : undefined;
        } else {
            const args = argsOrState as EventHubAuthorizationRuleArgs | undefined;
            if (!args || args.eventhubName === undefined) {
                throw new Error("Missing required property 'eventhubName'");
            }
            if (!args || args.namespaceName === undefined) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["eventhubName"] = args ? args.eventhubName : undefined;
            inputs["listen"] = args ? args.listen : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["manage"] = args ? args.manage : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceName"] = args ? args.namespaceName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["send"] = args ? args.send : undefined;
            inputs["primaryConnectionString"] = undefined /*out*/;
            inputs["primaryKey"] = undefined /*out*/;
            inputs["secondaryConnectionString"] = undefined /*out*/;
            inputs["secondaryKey"] = undefined /*out*/;
        }
        super(EventHubAuthorizationRule.__kuladoType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventHubAuthorizationRule resources.
 */
export interface EventHubAuthorizationRuleState {
    /**
     * Specifies the name of the EventHub. Changing this forces a new resource to be created.
     */
    readonly eventhubName?: kulado.Input<string>;
    /**
     * Does this Authorization Rule have permissions to Listen to the Event Hub? Defaults to `false`.
     */
    readonly listen?: kulado.Input<boolean>;
    readonly location?: kulado.Input<string>;
    /**
     * Does this Authorization Rule have permissions to Manage to the Event Hub? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
     */
    readonly manage?: kulado.Input<boolean>;
    /**
     * Specifies the name of the EventHub Authorization Rule resource. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * Specifies the name of the grandparent EventHub Namespace. Changing this forces a new resource to be created.
     */
    readonly namespaceName?: kulado.Input<string>;
    /**
     * The Primary Connection String for the Event Hubs authorization Rule.
     */
    readonly primaryConnectionString?: kulado.Input<string>;
    /**
     * The Primary Key for the Event Hubs authorization Rule.
     */
    readonly primaryKey?: kulado.Input<string>;
    /**
     * The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: kulado.Input<string>;
    /**
     * The Secondary Connection String for the Event Hubs authorization Rule.
     */
    readonly secondaryConnectionString?: kulado.Input<string>;
    /**
     * The Secondary Key for the Event Hubs authorization Rule.
     */
    readonly secondaryKey?: kulado.Input<string>;
    /**
     * Does this Authorization Rule have permissions to Send to the Event Hub? Defaults to `false`.
     */
    readonly send?: kulado.Input<boolean>;
}

/**
 * The set of arguments for constructing a EventHubAuthorizationRule resource.
 */
export interface EventHubAuthorizationRuleArgs {
    /**
     * Specifies the name of the EventHub. Changing this forces a new resource to be created.
     */
    readonly eventhubName: kulado.Input<string>;
    /**
     * Does this Authorization Rule have permissions to Listen to the Event Hub? Defaults to `false`.
     */
    readonly listen?: kulado.Input<boolean>;
    readonly location?: kulado.Input<string>;
    /**
     * Does this Authorization Rule have permissions to Manage to the Event Hub? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
     */
    readonly manage?: kulado.Input<boolean>;
    /**
     * Specifies the name of the EventHub Authorization Rule resource. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * Specifies the name of the grandparent EventHub Namespace. Changing this forces a new resource to be created.
     */
    readonly namespaceName: kulado.Input<string>;
    /**
     * The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: kulado.Input<string>;
    /**
     * Does this Authorization Rule have permissions to Send to the Event Hub? Defaults to `false`.
     */
    readonly send?: kulado.Input<boolean>;
}
