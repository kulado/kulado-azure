// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kulado from "@kulado/kulado";
import * as utilities from "../utilities";

/**
 * Use this data source to access information about an existing User Assigned Identity.
 * 
 * ## Example Usage (reference an existing)
 * 
 * ```typescript
 * import * as kulado from "@kulado/kulado";
 * import * as azure from "@kulado/azure";
 * 
 * const example = kulado.output(azure.core.getUserAssignedIdentity({
 *     name: "name_of_user_assigned_identity",
 *     resourceGroupName: "name_of_resource_group",
 * }));
 * 
 * export const uaiClientId = example.clientId;
 * export const uaiPrincipalId = example.principalId;
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/user_assigned_identity.html.markdown.
 */
export function getUserAssignedIdentity(args: GetUserAssignedIdentityArgs, opts?: kulado.InvokeOptions): Promise<GetUserAssignedIdentityResult> & GetUserAssignedIdentityResult {
    const promise: Promise<GetUserAssignedIdentityResult> = kulado.runtime.invoke("azure:core/getUserAssignedIdentity:getUserAssignedIdentity", {
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
    }, opts);

    return kulado.utils.liftProperties(promise, opts);
}

/**
 * A collection of arguments for invoking getUserAssignedIdentity.
 */
export interface GetUserAssignedIdentityArgs {
    /**
     * The name of the User Assigned Identity.
     */
    readonly name: string;
    /**
     * The name of the Resource Group in which the User Assigned Identity exists.
     */
    readonly resourceGroupName: string;
}

/**
 * A collection of values returned by getUserAssignedIdentity.
 */
export interface GetUserAssignedIdentityResult {
    /**
     * The Client ID of the User Assigned Identity.
     */
    readonly clientId: string;
    /**
     * The Azure location where the User Assigned Identity exists.
     */
    readonly location: string;
    readonly name: string;
    /**
     * The Service Principal ID of the User Assigned Identity.
     */
    readonly principalId: string;
    readonly resourceGroupName: string;
    /**
     * A mapping of tags assigned to the User Assigned Identity.
     */
    readonly tags: {[key: string]: any};
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
