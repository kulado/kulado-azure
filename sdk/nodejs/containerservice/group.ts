// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kulado from "@kulado/kulado";
import * as utilities from "../utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/container_group.html.markdown.
 */
export class Group extends kulado.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: kulado.Input<kulado.ID>, state?: GroupState, opts?: kulado.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __kuladoType = 'azure:containerservice/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Kulado SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__kuladoType'] === Group.__kuladoType;
    }

    /**
     * The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
     */
    public readonly containers!: kulado.Output<{ command: string, commands: string[], cpu: number, environmentVariables?: {[key: string]: any}, gpu?: { count?: number, sku?: string }, image: string, livenessProbe?: { execs?: string[], failureThreshold?: number, httpGets?: { path?: string, port?: number, scheme?: string }[], initialDelaySeconds?: number, periodSeconds?: number, successThreshold?: number, timeoutSeconds?: number }, memory: number, name: string, port: number, ports: { port: number, protocol: string }[], protocol: string, readinessProbe?: { execs?: string[], failureThreshold?: number, httpGets?: { path?: string, port?: number, scheme?: string }[], initialDelaySeconds?: number, periodSeconds?: number, successThreshold?: number, timeoutSeconds?: number }, secureEnvironmentVariables?: {[key: string]: any}, volumes?: { mountPath: string, name: string, readOnly?: boolean, shareName: string, storageAccountKey: string, storageAccountName: string }[] }[]>;
    /**
     * A `diagnostics` block as documented below.
     */
    public readonly diagnostics!: kulado.Output<{ logAnalytics: { logType: string, metadata?: {[key: string]: string}, workspaceId: string, workspaceKey: string } } | undefined>;
    /**
     * The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
     */
    public readonly dnsNameLabel!: kulado.Output<string | undefined>;
    /**
     * The FQDN of the container group derived from `dns_name_label`.
     */
    public /*out*/ readonly fqdn!: kulado.Output<string>;
    /**
     * An `identity` block as defined below.
     */
    public readonly identity!: kulado.Output<{ identityIds?: string[], principalId: string, type: string }>;
    /**
     * A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
     */
    public readonly imageRegistryCredentials!: kulado.Output<{ password: string, server: string, username: string }[] | undefined>;
    /**
     * The IP address allocated to the container group.
     */
    public /*out*/ readonly ipAddress!: kulado.Output<string>;
    /**
     * Specifies the ip address type of the container. `Public` is the only acceptable value at this time. Changing this forces a new resource to be created.
     */
    public readonly ipAddressType!: kulado.Output<string | undefined>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    public readonly location!: kulado.Output<string>;
    /**
     * Specifies the name of the Container Group. Changing this forces a new resource to be created.
     */
    public readonly name!: kulado.Output<string>;
    /**
     * The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     */
    public readonly osType!: kulado.Output<string>;
    /**
     * The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
     */
    public readonly resourceGroupName!: kulado.Output<string>;
    /**
     * Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
     */
    public readonly restartPolicy!: kulado.Output<string | undefined>;
    /**
     * A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
     */
    public readonly tags!: kulado.Output<{[key: string]: any}>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: kulado.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: kulado.CustomResourceOptions) {
        let inputs: kulado.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as GroupState | undefined;
            inputs["containers"] = state ? state.containers : undefined;
            inputs["diagnostics"] = state ? state.diagnostics : undefined;
            inputs["dnsNameLabel"] = state ? state.dnsNameLabel : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["imageRegistryCredentials"] = state ? state.imageRegistryCredentials : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["ipAddressType"] = state ? state.ipAddressType : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["osType"] = state ? state.osType : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["restartPolicy"] = state ? state.restartPolicy : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if (!args || args.containers === undefined) {
                throw new Error("Missing required property 'containers'");
            }
            if (!args || args.osType === undefined) {
                throw new Error("Missing required property 'osType'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["containers"] = args ? args.containers : undefined;
            inputs["diagnostics"] = args ? args.diagnostics : undefined;
            inputs["dnsNameLabel"] = args ? args.dnsNameLabel : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["imageRegistryCredentials"] = args ? args.imageRegistryCredentials : undefined;
            inputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["osType"] = args ? args.osType : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["restartPolicy"] = args ? args.restartPolicy : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["fqdn"] = undefined /*out*/;
            inputs["ipAddress"] = undefined /*out*/;
        }
        super(Group.__kuladoType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
     */
    readonly containers?: kulado.Input<kulado.Input<{ command?: kulado.Input<string>, commands?: kulado.Input<kulado.Input<string>[]>, cpu: kulado.Input<number>, environmentVariables?: kulado.Input<{[key: string]: any}>, gpu?: kulado.Input<{ count?: kulado.Input<number>, sku?: kulado.Input<string> }>, image: kulado.Input<string>, livenessProbe?: kulado.Input<{ execs?: kulado.Input<kulado.Input<string>[]>, failureThreshold?: kulado.Input<number>, httpGets?: kulado.Input<kulado.Input<{ path?: kulado.Input<string>, port?: kulado.Input<number>, scheme?: kulado.Input<string> }>[]>, initialDelaySeconds?: kulado.Input<number>, periodSeconds?: kulado.Input<number>, successThreshold?: kulado.Input<number>, timeoutSeconds?: kulado.Input<number> }>, memory: kulado.Input<number>, name: kulado.Input<string>, port?: kulado.Input<number>, ports?: kulado.Input<kulado.Input<{ port?: kulado.Input<number>, protocol?: kulado.Input<string> }>[]>, protocol?: kulado.Input<string>, readinessProbe?: kulado.Input<{ execs?: kulado.Input<kulado.Input<string>[]>, failureThreshold?: kulado.Input<number>, httpGets?: kulado.Input<kulado.Input<{ path?: kulado.Input<string>, port?: kulado.Input<number>, scheme?: kulado.Input<string> }>[]>, initialDelaySeconds?: kulado.Input<number>, periodSeconds?: kulado.Input<number>, successThreshold?: kulado.Input<number>, timeoutSeconds?: kulado.Input<number> }>, secureEnvironmentVariables?: kulado.Input<{[key: string]: any}>, volumes?: kulado.Input<kulado.Input<{ mountPath: kulado.Input<string>, name: kulado.Input<string>, readOnly?: kulado.Input<boolean>, shareName: kulado.Input<string>, storageAccountKey: kulado.Input<string>, storageAccountName: kulado.Input<string> }>[]> }>[]>;
    /**
     * A `diagnostics` block as documented below.
     */
    readonly diagnostics?: kulado.Input<{ logAnalytics: kulado.Input<{ logType: kulado.Input<string>, metadata?: kulado.Input<{[key: string]: kulado.Input<string>}>, workspaceId: kulado.Input<string>, workspaceKey: kulado.Input<string> }> }>;
    /**
     * The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
     */
    readonly dnsNameLabel?: kulado.Input<string>;
    /**
     * The FQDN of the container group derived from `dns_name_label`.
     */
    readonly fqdn?: kulado.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    readonly identity?: kulado.Input<{ identityIds?: kulado.Input<kulado.Input<string>[]>, principalId?: kulado.Input<string>, type: kulado.Input<string> }>;
    /**
     * A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
     */
    readonly imageRegistryCredentials?: kulado.Input<kulado.Input<{ password: kulado.Input<string>, server: kulado.Input<string>, username: kulado.Input<string> }>[]>;
    /**
     * The IP address allocated to the container group.
     */
    readonly ipAddress?: kulado.Input<string>;
    /**
     * Specifies the ip address type of the container. `Public` is the only acceptable value at this time. Changing this forces a new resource to be created.
     */
    readonly ipAddressType?: kulado.Input<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    readonly location?: kulado.Input<string>;
    /**
     * Specifies the name of the Container Group. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     */
    readonly osType?: kulado.Input<string>;
    /**
     * The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName?: kulado.Input<string>;
    /**
     * Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
     */
    readonly restartPolicy?: kulado.Input<string>;
    /**
     * A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
     */
    readonly tags?: kulado.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
     */
    readonly containers: kulado.Input<kulado.Input<{ command?: kulado.Input<string>, commands?: kulado.Input<kulado.Input<string>[]>, cpu: kulado.Input<number>, environmentVariables?: kulado.Input<{[key: string]: any}>, gpu?: kulado.Input<{ count?: kulado.Input<number>, sku?: kulado.Input<string> }>, image: kulado.Input<string>, livenessProbe?: kulado.Input<{ execs?: kulado.Input<kulado.Input<string>[]>, failureThreshold?: kulado.Input<number>, httpGets?: kulado.Input<kulado.Input<{ path?: kulado.Input<string>, port?: kulado.Input<number>, scheme?: kulado.Input<string> }>[]>, initialDelaySeconds?: kulado.Input<number>, periodSeconds?: kulado.Input<number>, successThreshold?: kulado.Input<number>, timeoutSeconds?: kulado.Input<number> }>, memory: kulado.Input<number>, name: kulado.Input<string>, port?: kulado.Input<number>, ports?: kulado.Input<kulado.Input<{ port?: kulado.Input<number>, protocol?: kulado.Input<string> }>[]>, protocol?: kulado.Input<string>, readinessProbe?: kulado.Input<{ execs?: kulado.Input<kulado.Input<string>[]>, failureThreshold?: kulado.Input<number>, httpGets?: kulado.Input<kulado.Input<{ path?: kulado.Input<string>, port?: kulado.Input<number>, scheme?: kulado.Input<string> }>[]>, initialDelaySeconds?: kulado.Input<number>, periodSeconds?: kulado.Input<number>, successThreshold?: kulado.Input<number>, timeoutSeconds?: kulado.Input<number> }>, secureEnvironmentVariables?: kulado.Input<{[key: string]: any}>, volumes?: kulado.Input<kulado.Input<{ mountPath: kulado.Input<string>, name: kulado.Input<string>, readOnly?: kulado.Input<boolean>, shareName: kulado.Input<string>, storageAccountKey: kulado.Input<string>, storageAccountName: kulado.Input<string> }>[]> }>[]>;
    /**
     * A `diagnostics` block as documented below.
     */
    readonly diagnostics?: kulado.Input<{ logAnalytics: kulado.Input<{ logType: kulado.Input<string>, metadata?: kulado.Input<{[key: string]: kulado.Input<string>}>, workspaceId: kulado.Input<string>, workspaceKey: kulado.Input<string> }> }>;
    /**
     * The DNS label/name for the container groups IP. Changing this forces a new resource to be created.
     */
    readonly dnsNameLabel?: kulado.Input<string>;
    /**
     * An `identity` block as defined below.
     */
    readonly identity?: kulado.Input<{ identityIds?: kulado.Input<kulado.Input<string>[]>, principalId?: kulado.Input<string>, type: kulado.Input<string> }>;
    /**
     * A `image_registry_credential` block as documented below. Changing this forces a new resource to be created.
     */
    readonly imageRegistryCredentials?: kulado.Input<kulado.Input<{ password: kulado.Input<string>, server: kulado.Input<string>, username: kulado.Input<string> }>[]>;
    /**
     * Specifies the ip address type of the container. `Public` is the only acceptable value at this time. Changing this forces a new resource to be created.
     */
    readonly ipAddressType?: kulado.Input<string>;
    /**
     * Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
     */
    readonly location?: kulado.Input<string>;
    /**
     * Specifies the name of the Container Group. Changing this forces a new resource to be created.
     */
    readonly name?: kulado.Input<string>;
    /**
     * The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
     */
    readonly osType: kulado.Input<string>;
    /**
     * The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
     */
    readonly resourceGroupName: kulado.Input<string>;
    /**
     * Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
     */
    readonly restartPolicy?: kulado.Input<string>;
    /**
     * A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
     */
    readonly tags?: kulado.Input<{[key: string]: any}>;
}
