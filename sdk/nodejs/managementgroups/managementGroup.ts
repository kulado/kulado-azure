// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kulado from "@kulado/kulado";
import * as utilities from "../utilities";

/**
 * Manages a Management Group.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as kulado from "@kulado/kulado";
 * import * as azure from "@kulado/azure";
 * 
 * const current = kulado.output(azure.core.getSubscription({}));
 * const exampleParent = new azure.managementgroups.ManagementGroup("example_parent", {
 *     displayName: "ParentGroup",
 *     subscriptionIds: [current.subscriptionId],
 * });
 * const exampleChild = new azure.managementgroups.ManagementGroup("example_child", {
 *     displayName: "ChildGroup",
 *     parentManagementGroupId: exampleParent.id,
 *     subscriptionIds: [current.subscriptionId],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/management_group.html.markdown.
 */
export class ManagementGroup extends kulado.CustomResource {
    /**
     * Get an existing ManagementGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: kulado.Input<kulado.ID>, state?: ManagementGroupState, opts?: kulado.CustomResourceOptions): ManagementGroup {
        return new ManagementGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __kuladoType = 'azure:managementgroups/managementGroup:ManagementGroup';

    /**
     * Returns true if the given object is an instance of ManagementGroup.  This is designed to work even
     * when multiple copies of the Kulado SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__kuladoType'] === ManagementGroup.__kuladoType;
    }

    /**
     * A friendly name for this Management Group. If not specified, this'll be the same as the `group_id`.
     */
    public readonly displayName!: kulado.Output<string>;
    /**
     * The UUID for this Management Group, which needs to be unique across your tenant - which will be generated if not provided. Changing this forces a new resource to be created.
     */
    public readonly groupId!: kulado.Output<string>;
    /**
     * The ID of the Parent Management Group. Changing this forces a new resource to be created.
     */
    public readonly parentManagementGroupId!: kulado.Output<string>;
    /**
     * A list of Subscription GUIDs which should be assigned to the Management Group.
     */
    public readonly subscriptionIds!: kulado.Output<string[] | undefined>;

    /**
     * Create a ManagementGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementGroupArgs, opts?: kulado.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementGroupArgs | ManagementGroupState, opts?: kulado.CustomResourceOptions) {
        let inputs: kulado.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ManagementGroupState | undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["groupId"] = state ? state.groupId : undefined;
            inputs["parentManagementGroupId"] = state ? state.parentManagementGroupId : undefined;
            inputs["subscriptionIds"] = state ? state.subscriptionIds : undefined;
        } else {
            const args = argsOrState as ManagementGroupArgs | undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["groupId"] = args ? args.groupId : undefined;
            inputs["parentManagementGroupId"] = args ? args.parentManagementGroupId : undefined;
            inputs["subscriptionIds"] = args ? args.subscriptionIds : undefined;
        }
        super(ManagementGroup.__kuladoType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagementGroup resources.
 */
export interface ManagementGroupState {
    /**
     * A friendly name for this Management Group. If not specified, this'll be the same as the `group_id`.
     */
    readonly displayName?: kulado.Input<string>;
    /**
     * The UUID for this Management Group, which needs to be unique across your tenant - which will be generated if not provided. Changing this forces a new resource to be created.
     */
    readonly groupId?: kulado.Input<string>;
    /**
     * The ID of the Parent Management Group. Changing this forces a new resource to be created.
     */
    readonly parentManagementGroupId?: kulado.Input<string>;
    /**
     * A list of Subscription GUIDs which should be assigned to the Management Group.
     */
    readonly subscriptionIds?: kulado.Input<kulado.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ManagementGroup resource.
 */
export interface ManagementGroupArgs {
    /**
     * A friendly name for this Management Group. If not specified, this'll be the same as the `group_id`.
     */
    readonly displayName?: kulado.Input<string>;
    /**
     * The UUID for this Management Group, which needs to be unique across your tenant - which will be generated if not provided. Changing this forces a new resource to be created.
     */
    readonly groupId?: kulado.Input<string>;
    /**
     * The ID of the Parent Management Group. Changing this forces a new resource to be created.
     */
    readonly parentManagementGroupId?: kulado.Input<string>;
    /**
     * A list of Subscription GUIDs which should be assigned to the Management Group.
     */
    readonly subscriptionIds?: kulado.Input<kulado.Input<string>[]>;
}
