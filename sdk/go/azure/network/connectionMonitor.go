// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pkg/errors"
	"github.com/kulado/kulado/sdk/go/kulado"
)

// Configures a Connection Monitor to monitor communication between a Virtual Machine and an endpoint using a Network Watcher.
// 
// > **NOTE:** This resource has been deprecated in favour of the `azurerm_network_connection_monitor` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, and information on migrating across can be found in this guide.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/connection_monitor.html.markdown.
type ConnectionMonitor struct {
	s *kulado.ResourceState
}

// NewConnectionMonitor registers a new resource with the given unique name, arguments, and options.
func NewConnectionMonitor(ctx *kulado.Context,
	name string, args *ConnectionMonitorArgs, opts ...kulado.ResourceOpt) (*ConnectionMonitor, error) {
	if args == nil || args.Destination == nil {
		return nil, errors.New("missing required argument 'Destination'")
	}
	if args == nil || args.NetworkWatcherName == nil {
		return nil, errors.New("missing required argument 'NetworkWatcherName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoStart"] = nil
		inputs["destination"] = nil
		inputs["intervalInSeconds"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["networkWatcherName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["source"] = nil
		inputs["tags"] = nil
	} else {
		inputs["autoStart"] = args.AutoStart
		inputs["destination"] = args.Destination
		inputs["intervalInSeconds"] = args.IntervalInSeconds
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["networkWatcherName"] = args.NetworkWatcherName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["source"] = args.Source
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("azure:network/connectionMonitor:ConnectionMonitor", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConnectionMonitor{s: s}, nil
}

// GetConnectionMonitor gets an existing ConnectionMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionMonitor(ctx *kulado.Context,
	name string, id kulado.ID, state *ConnectionMonitorState, opts ...kulado.ResourceOpt) (*ConnectionMonitor, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoStart"] = state.AutoStart
		inputs["destination"] = state.Destination
		inputs["intervalInSeconds"] = state.IntervalInSeconds
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["networkWatcherName"] = state.NetworkWatcherName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["source"] = state.Source
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:network/connectionMonitor:ConnectionMonitor", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ConnectionMonitor{s: s}, nil
}

// URN is this resource's unique name assigned by Kulado.
func (r *ConnectionMonitor) URN() *kulado.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ConnectionMonitor) ID() *kulado.IDOutput {
	return r.s.ID()
}

// Specifies whether the connection monitor will start automatically once created. Defaults to `true`. Changing this forces a new resource to be created.
func (r *ConnectionMonitor) AutoStart() *kulado.BoolOutput {
	return (*kulado.BoolOutput)(r.s.State["autoStart"])
}

// A `destination` block as defined below.
func (r *ConnectionMonitor) Destination() *kulado.Output {
	return r.s.State["destination"]
}

// Monitoring interval in seconds. Defaults to `60`.
func (r *ConnectionMonitor) IntervalInSeconds() *kulado.IntOutput {
	return (*kulado.IntOutput)(r.s.State["intervalInSeconds"])
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *ConnectionMonitor) Location() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["location"])
}

// The name of the Connection Monitor. Changing this forces a new resource to be created.
func (r *ConnectionMonitor) Name() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["name"])
}

// The name of the Network Watcher. Changing this forces a new resource to be created.
func (r *ConnectionMonitor) NetworkWatcherName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["networkWatcherName"])
}

// The name of the resource group in which to create the Connection Monitor. Changing this forces a new resource to be created.
func (r *ConnectionMonitor) ResourceGroupName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["resourceGroupName"])
}

// A `source` block as defined below.
func (r *ConnectionMonitor) Source() *kulado.Output {
	return r.s.State["source"]
}

// A mapping of tags to assign to the resource.
func (r *ConnectionMonitor) Tags() *kulado.MapOutput {
	return (*kulado.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering ConnectionMonitor resources.
type ConnectionMonitorState struct {
	// Specifies whether the connection monitor will start automatically once created. Defaults to `true`. Changing this forces a new resource to be created.
	AutoStart interface{}
	// A `destination` block as defined below.
	Destination interface{}
	// Monitoring interval in seconds. Defaults to `60`.
	IntervalInSeconds interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the Connection Monitor. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName interface{}
	// The name of the resource group in which to create the Connection Monitor. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A `source` block as defined below.
	Source interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a ConnectionMonitor resource.
type ConnectionMonitorArgs struct {
	// Specifies whether the connection monitor will start automatically once created. Defaults to `true`. Changing this forces a new resource to be created.
	AutoStart interface{}
	// A `destination` block as defined below.
	Destination interface{}
	// Monitoring interval in seconds. Defaults to `60`.
	IntervalInSeconds interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the Connection Monitor. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName interface{}
	// The name of the resource group in which to create the Connection Monitor. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A `source` block as defined below.
	Source interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
