// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/kulado/kulado/sdk/go/kulado"
)

// Manages an API within an API Management Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_api.html.markdown.
type Api struct {
	s *kulado.ResourceState
}

// NewApi registers a new resource with the given unique name, arguments, and options.
func NewApi(ctx *kulado.Context,
	name string, args *ApiArgs, opts ...kulado.ResourceOpt) (*Api, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	if args == nil || args.Protocols == nil {
		return nil, errors.New("missing required argument 'Protocols'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Revision == nil {
		return nil, errors.New("missing required argument 'Revision'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["apiManagementName"] = nil
		inputs["description"] = nil
		inputs["displayName"] = nil
		inputs["import"] = nil
		inputs["name"] = nil
		inputs["path"] = nil
		inputs["protocols"] = nil
		inputs["resourceGroupName"] = nil
		inputs["revision"] = nil
		inputs["serviceUrl"] = nil
		inputs["soapPassThrough"] = nil
		inputs["subscriptionKeyParameterNames"] = nil
	} else {
		inputs["apiManagementName"] = args.ApiManagementName
		inputs["description"] = args.Description
		inputs["displayName"] = args.DisplayName
		inputs["import"] = args.Import
		inputs["name"] = args.Name
		inputs["path"] = args.Path
		inputs["protocols"] = args.Protocols
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["revision"] = args.Revision
		inputs["serviceUrl"] = args.ServiceUrl
		inputs["soapPassThrough"] = args.SoapPassThrough
		inputs["subscriptionKeyParameterNames"] = args.SubscriptionKeyParameterNames
	}
	inputs["isCurrent"] = nil
	inputs["isOnline"] = nil
	inputs["version"] = nil
	inputs["versionSetId"] = nil
	s, err := ctx.RegisterResource("azure:apimanagement/api:Api", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Api{s: s}, nil
}

// GetApi gets an existing Api resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApi(ctx *kulado.Context,
	name string, id kulado.ID, state *ApiState, opts ...kulado.ResourceOpt) (*Api, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apiManagementName"] = state.ApiManagementName
		inputs["description"] = state.Description
		inputs["displayName"] = state.DisplayName
		inputs["import"] = state.Import
		inputs["isCurrent"] = state.IsCurrent
		inputs["isOnline"] = state.IsOnline
		inputs["name"] = state.Name
		inputs["path"] = state.Path
		inputs["protocols"] = state.Protocols
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["revision"] = state.Revision
		inputs["serviceUrl"] = state.ServiceUrl
		inputs["soapPassThrough"] = state.SoapPassThrough
		inputs["subscriptionKeyParameterNames"] = state.SubscriptionKeyParameterNames
		inputs["version"] = state.Version
		inputs["versionSetId"] = state.VersionSetId
	}
	s, err := ctx.ReadResource("azure:apimanagement/api:Api", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Api{s: s}, nil
}

// URN is this resource's unique name assigned by Kulado.
func (r *Api) URN() *kulado.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Api) ID() *kulado.IDOutput {
	return r.s.ID()
}

// The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.
func (r *Api) ApiManagementName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["apiManagementName"])
}

// A description of the API Management API, which may include HTML formatting tags.
func (r *Api) Description() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["description"])
}

// The display name of the API.
func (r *Api) DisplayName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["displayName"])
}

// A `import` block as documented below.
func (r *Api) Import() *kulado.Output {
	return r.s.State["import"]
}

// Is this the current API Revision?
func (r *Api) IsCurrent() *kulado.BoolOutput {
	return (*kulado.BoolOutput)(r.s.State["isCurrent"])
}

// Is this API Revision online/accessible via the Gateway?
func (r *Api) IsOnline() *kulado.BoolOutput {
	return (*kulado.BoolOutput)(r.s.State["isOnline"])
}

// The name of the API Management API. Changing this forces a new resource to be created.
func (r *Api) Name() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["name"])
}

// The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of it's resource paths within the API Management Service.
func (r *Api) Path() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["path"])
}

// A list of protocols the operations in this API can be invoked. Possible values are `http` and `https`.
func (r *Api) Protocols() *kulado.ArrayOutput {
	return (*kulado.ArrayOutput)(r.s.State["protocols"])
}

// The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.
func (r *Api) ResourceGroupName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["resourceGroupName"])
}

// The Revision which used for this API.
func (r *Api) Revision() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["revision"])
}

// Absolute URL of the backend service implementing this API.
func (r *Api) ServiceUrl() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["serviceUrl"])
}

// Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to `false`.
func (r *Api) SoapPassThrough() *kulado.BoolOutput {
	return (*kulado.BoolOutput)(r.s.State["soapPassThrough"])
}

// A `subscription_key_parameter_names` block as documented below.
func (r *Api) SubscriptionKeyParameterNames() *kulado.Output {
	return r.s.State["subscriptionKeyParameterNames"]
}

// The Version number of this API, if this API is versioned.
func (r *Api) Version() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["version"])
}

// The ID of the Version Set which this API is associated with.
func (r *Api) VersionSetId() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["versionSetId"])
}

// Input properties used for looking up and filtering Api resources.
type ApiState struct {
	// The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// A description of the API Management API, which may include HTML formatting tags.
	Description interface{}
	// The display name of the API.
	DisplayName interface{}
	// A `import` block as documented below.
	Import interface{}
	// Is this the current API Revision?
	IsCurrent interface{}
	// Is this API Revision online/accessible via the Gateway?
	IsOnline interface{}
	// The name of the API Management API. Changing this forces a new resource to be created.
	Name interface{}
	// The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of it's resource paths within the API Management Service.
	Path interface{}
	// A list of protocols the operations in this API can be invoked. Possible values are `http` and `https`.
	Protocols interface{}
	// The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The Revision which used for this API.
	Revision interface{}
	// Absolute URL of the backend service implementing this API.
	ServiceUrl interface{}
	// Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to `false`.
	SoapPassThrough interface{}
	// A `subscription_key_parameter_names` block as documented below.
	SubscriptionKeyParameterNames interface{}
	// The Version number of this API, if this API is versioned.
	Version interface{}
	// The ID of the Version Set which this API is associated with.
	VersionSetId interface{}
}

// The set of arguments for constructing a Api resource.
type ApiArgs struct {
	// The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// A description of the API Management API, which may include HTML formatting tags.
	Description interface{}
	// The display name of the API.
	DisplayName interface{}
	// A `import` block as documented below.
	Import interface{}
	// The name of the API Management API. Changing this forces a new resource to be created.
	Name interface{}
	// The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of it's resource paths within the API Management Service.
	Path interface{}
	// A list of protocols the operations in this API can be invoked. Possible values are `http` and `https`.
	Protocols interface{}
	// The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The Revision which used for this API.
	Revision interface{}
	// Absolute URL of the backend service implementing this API.
	ServiceUrl interface{}
	// Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to `false`.
	SoapPassThrough interface{}
	// A `subscription_key_parameter_names` block as documented below.
	SubscriptionKeyParameterNames interface{}
}
