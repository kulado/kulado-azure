// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"github.com/pkg/errors"
	"github.com/kulado/kulado/sdk/go/kulado"
)

// Manages a Key Vault.
// 
// > **NOTE:** It's possible to define Key Vault Access Policies both within the `azurerm_key_vault` resource via the `access_policy` block and by using the `azurerm_key_vault_access_policy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/key_vault.html.markdown.
type KeyVault struct {
	s *kulado.ResourceState
}

// NewKeyVault registers a new resource with the given unique name, arguments, and options.
func NewKeyVault(ctx *kulado.Context,
	name string, args *KeyVaultArgs, opts ...kulado.ResourceOpt) (*KeyVault, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.TenantId == nil {
		return nil, errors.New("missing required argument 'TenantId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessPolicies"] = nil
		inputs["enabledForDeployment"] = nil
		inputs["enabledForDiskEncryption"] = nil
		inputs["enabledForTemplateDeployment"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["networkAcls"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sku"] = nil
		inputs["skuName"] = nil
		inputs["tags"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["accessPolicies"] = args.AccessPolicies
		inputs["enabledForDeployment"] = args.EnabledForDeployment
		inputs["enabledForDiskEncryption"] = args.EnabledForDiskEncryption
		inputs["enabledForTemplateDeployment"] = args.EnabledForTemplateDeployment
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["networkAcls"] = args.NetworkAcls
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sku"] = args.Sku
		inputs["skuName"] = args.SkuName
		inputs["tags"] = args.Tags
		inputs["tenantId"] = args.TenantId
	}
	inputs["vaultUri"] = nil
	s, err := ctx.RegisterResource("azure:keyvault/keyVault:KeyVault", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KeyVault{s: s}, nil
}

// GetKeyVault gets an existing KeyVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyVault(ctx *kulado.Context,
	name string, id kulado.ID, state *KeyVaultState, opts ...kulado.ResourceOpt) (*KeyVault, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessPolicies"] = state.AccessPolicies
		inputs["enabledForDeployment"] = state.EnabledForDeployment
		inputs["enabledForDiskEncryption"] = state.EnabledForDiskEncryption
		inputs["enabledForTemplateDeployment"] = state.EnabledForTemplateDeployment
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["networkAcls"] = state.NetworkAcls
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["sku"] = state.Sku
		inputs["skuName"] = state.SkuName
		inputs["tags"] = state.Tags
		inputs["tenantId"] = state.TenantId
		inputs["vaultUri"] = state.VaultUri
	}
	s, err := ctx.ReadResource("azure:keyvault/keyVault:KeyVault", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KeyVault{s: s}, nil
}

// URN is this resource's unique name assigned by Kulado.
func (r *KeyVault) URN() *kulado.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KeyVault) ID() *kulado.IDOutput {
	return r.s.ID()
}

// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of up to 16 objects describing access policies, as described below.
func (r *KeyVault) AccessPolicies() *kulado.ArrayOutput {
	return (*kulado.ArrayOutput)(r.s.State["accessPolicies"])
}

// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. Defaults to `false`.
func (r *KeyVault) EnabledForDeployment() *kulado.BoolOutput {
	return (*kulado.BoolOutput)(r.s.State["enabledForDeployment"])
}

// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. Defaults to `false`.
func (r *KeyVault) EnabledForDiskEncryption() *kulado.BoolOutput {
	return (*kulado.BoolOutput)(r.s.State["enabledForDiskEncryption"])
}

// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. Defaults to `false`.
func (r *KeyVault) EnabledForTemplateDeployment() *kulado.BoolOutput {
	return (*kulado.BoolOutput)(r.s.State["enabledForTemplateDeployment"])
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *KeyVault) Location() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["location"])
}

// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
func (r *KeyVault) Name() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["name"])
}

// A `network_acls` block as defined below.
func (r *KeyVault) NetworkAcls() *kulado.Output {
	return r.s.State["networkAcls"]
}

// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
func (r *KeyVault) ResourceGroupName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["resourceGroupName"])
}

// ) A `sku` block as described below.
func (r *KeyVault) Sku() *kulado.Output {
	return r.s.State["sku"]
}

// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
func (r *KeyVault) SkuName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["skuName"])
}

// A mapping of tags to assign to the resource.
func (r *KeyVault) Tags() *kulado.MapOutput {
	return (*kulado.MapOutput)(r.s.State["tags"])
}

// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
func (r *KeyVault) TenantId() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["tenantId"])
}

// The URI of the Key Vault, used for performing operations on keys and secrets.
func (r *KeyVault) VaultUri() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["vaultUri"])
}

// Input properties used for looking up and filtering KeyVault resources.
type KeyVaultState struct {
	// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of up to 16 objects describing access policies, as described below.
	AccessPolicies interface{}
	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. Defaults to `false`.
	EnabledForDeployment interface{}
	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. Defaults to `false`.
	EnabledForDiskEncryption interface{}
	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. Defaults to `false`.
	EnabledForTemplateDeployment interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
	Name interface{}
	// A `network_acls` block as defined below.
	NetworkAcls interface{}
	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// ) A `sku` block as described below.
	Sku interface{}
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId interface{}
	// The URI of the Key Vault, used for performing operations on keys and secrets.
	VaultUri interface{}
}

// The set of arguments for constructing a KeyVault resource.
type KeyVaultArgs struct {
	// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of up to 16 objects describing access policies, as described below.
	AccessPolicies interface{}
	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault. Defaults to `false`.
	EnabledForDeployment interface{}
	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys. Defaults to `false`.
	EnabledForDiskEncryption interface{}
	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault. Defaults to `false`.
	EnabledForTemplateDeployment interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the Key Vault. Changing this forces a new resource to be created.
	Name interface{}
	// A `network_acls` block as defined below.
	NetworkAcls interface{}
	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// ) A `sku` block as described below.
	Sku interface{}
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId interface{}
}
