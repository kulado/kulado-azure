// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package recoveryservices

import (
	"github.com/pkg/errors"
	"github.com/kulado/kulado/sdk/go/kulado"
)

// Manage an Recovery Services Vault.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/recovery_services_vault.html.markdown.
type Vault struct {
	s *kulado.ResourceState
}

// NewVault registers a new resource with the given unique name, arguments, and options.
func NewVault(ctx *kulado.Context,
	name string, args *VaultArgs, opts ...kulado.ResourceOpt) (*Vault, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sku == nil {
		return nil, errors.New("missing required argument 'Sku'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sku"] = nil
		inputs["tags"] = nil
	} else {
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sku"] = args.Sku
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("azure:recoveryservices/vault:Vault", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Vault{s: s}, nil
}

// GetVault gets an existing Vault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVault(ctx *kulado.Context,
	name string, id kulado.ID, state *VaultState, opts ...kulado.ResourceOpt) (*Vault, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["sku"] = state.Sku
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:recoveryservices/vault:Vault", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Vault{s: s}, nil
}

// URN is this resource's unique name assigned by Kulado.
func (r *Vault) URN() *kulado.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Vault) ID() *kulado.IDOutput {
	return r.s.ID()
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *Vault) Location() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["location"])
}

// Specifies the name of the Recovery Services Vault. Changing this forces a new resource to be created.
func (r *Vault) Name() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["name"])
}

// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
func (r *Vault) ResourceGroupName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["resourceGroupName"])
}

// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
func (r *Vault) Sku() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["sku"])
}

// A mapping of tags to assign to the resource.
func (r *Vault) Tags() *kulado.MapOutput {
	return (*kulado.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Vault resources.
type VaultState struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the Recovery Services Vault. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
	Sku interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a Vault resource.
type VaultArgs struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the Recovery Services Vault. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
	Sku interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
