// *** WARNING: this file was generated by the Kulado Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"github.com/pkg/errors"
	"github.com/kulado/kulado/sdk/go/kulado"
)

// Manages an Activity Log Alert within Azure Monitor.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/monitor_activity_log_alert.html.markdown.
type ActivityLogAlert struct {
	s *kulado.ResourceState
}

// NewActivityLogAlert registers a new resource with the given unique name, arguments, and options.
func NewActivityLogAlert(ctx *kulado.Context,
	name string, args *ActivityLogAlertArgs, opts ...kulado.ResourceOpt) (*ActivityLogAlert, error) {
	if args == nil || args.Criteria == nil {
		return nil, errors.New("missing required argument 'Criteria'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Scopes == nil {
		return nil, errors.New("missing required argument 'Scopes'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["actions"] = nil
		inputs["criteria"] = nil
		inputs["description"] = nil
		inputs["enabled"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["scopes"] = nil
		inputs["tags"] = nil
	} else {
		inputs["actions"] = args.Actions
		inputs["criteria"] = args.Criteria
		inputs["description"] = args.Description
		inputs["enabled"] = args.Enabled
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["scopes"] = args.Scopes
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("azure:monitoring/activityLogAlert:ActivityLogAlert", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ActivityLogAlert{s: s}, nil
}

// GetActivityLogAlert gets an existing ActivityLogAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActivityLogAlert(ctx *kulado.Context,
	name string, id kulado.ID, state *ActivityLogAlertState, opts ...kulado.ResourceOpt) (*ActivityLogAlert, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["actions"] = state.Actions
		inputs["criteria"] = state.Criteria
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["scopes"] = state.Scopes
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:monitoring/activityLogAlert:ActivityLogAlert", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ActivityLogAlert{s: s}, nil
}

// URN is this resource's unique name assigned by Kulado.
func (r *ActivityLogAlert) URN() *kulado.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ActivityLogAlert) ID() *kulado.IDOutput {
	return r.s.ID()
}

// One or more `action` blocks as defined below.
func (r *ActivityLogAlert) Actions() *kulado.ArrayOutput {
	return (*kulado.ArrayOutput)(r.s.State["actions"])
}

// A `criteria` block as defined below.
func (r *ActivityLogAlert) Criteria() *kulado.Output {
	return r.s.State["criteria"]
}

// The description of this activity log alert.
func (r *ActivityLogAlert) Description() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["description"])
}

// Should this Activity Log Alert be enabled? Defaults to `true`.
func (r *ActivityLogAlert) Enabled() *kulado.BoolOutput {
	return (*kulado.BoolOutput)(r.s.State["enabled"])
}

// The name of the activity log alert. Changing this forces a new resource to be created.
func (r *ActivityLogAlert) Name() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["name"])
}

// The name of the resource group in which to create the activity log alert instance.
func (r *ActivityLogAlert) ResourceGroupName() *kulado.StringOutput {
	return (*kulado.StringOutput)(r.s.State["resourceGroupName"])
}

// The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
func (r *ActivityLogAlert) Scopes() *kulado.ArrayOutput {
	return (*kulado.ArrayOutput)(r.s.State["scopes"])
}

// A mapping of tags to assign to the resource.
func (r *ActivityLogAlert) Tags() *kulado.MapOutput {
	return (*kulado.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering ActivityLogAlert resources.
type ActivityLogAlertState struct {
	// One or more `action` blocks as defined below.
	Actions interface{}
	// A `criteria` block as defined below.
	Criteria interface{}
	// The description of this activity log alert.
	Description interface{}
	// Should this Activity Log Alert be enabled? Defaults to `true`.
	Enabled interface{}
	// The name of the activity log alert. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the resource group in which to create the activity log alert instance.
	ResourceGroupName interface{}
	// The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
	Scopes interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a ActivityLogAlert resource.
type ActivityLogAlertArgs struct {
	// One or more `action` blocks as defined below.
	Actions interface{}
	// A `criteria` block as defined below.
	Criteria interface{}
	// The description of this activity log alert.
	Description interface{}
	// Should this Activity Log Alert be enabled? Defaults to `true`.
	Enabled interface{}
	// The name of the activity log alert. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the resource group in which to create the activity log alert instance.
	ResourceGroupName interface{}
	// The Scope at which the Activity Log should be applied, for example a the Resource ID of a Subscription or a Resource (such as a Storage Account).
	Scopes interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
